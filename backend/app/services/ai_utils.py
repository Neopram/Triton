import asyncio
from typing import Dict, Any, Optional, List

from app.services.ai_engine import query_ai_engine

async def generate_market_summary(text: str, **kwargs) -> str:
    """
    Generate a summary of market information.
    
    Args:
        text: The market text to summarize
        **kwargs: Additional parameters to pass to query_ai_engine
        
    Returns:
        Summary generated by the AI
    """
    prompt = f"Analyze this shipping market report and provide key insights:\n\n{text}"
    return await query_ai_engine(prompt, **kwargs)

async def analyze_vessel_performance(data: Dict[str, Any], **kwargs) -> str:
    """
    Analyze vessel performance data.
    
    Args:
        data: Vessel performance data
        **kwargs: Additional parameters to pass to query_ai_engine
        
    Returns:
        Analysis generated by the AI
    """
    # Convert data to string representation
    data_str = "\n".join([f"{k}: {v}" for k, v in data.items()])
    
    prompt = f"Analyze this vessel performance data and provide insights:\n\n{data_str}"
    return await query_ai_engine(prompt, **kwargs)

async def suggest_route_optimization(
    origin: str,
    destination: str,
    vessel_type: str,
    constraints: Optional[List[str]] = None,
    **kwargs
) -> str:
    """
    Suggest route optimization based on inputs.
    
    Args:
        origin: Origin port
        destination: Destination port
        vessel_type: Type of vessel
        constraints: List of constraints to consider
        **kwargs: Additional parameters to pass to query_ai_engine
        
    Returns:
        Route optimization suggestions
    """
    constraints_str = "\n- " + "\n- ".join(constraints) if constraints else "None"
    
    prompt = f"""
    Suggest optimal route planning for:
    - Origin: {origin}
    - Destination: {destination}
    - Vessel Type: {vessel_type}
    - Constraints: {constraints_str}
    """
    
    return await query_ai_engine(prompt, **kwargs)

async def analyze_emissions_data(emissions_data: Dict[str, Any], **kwargs) -> str:
    """
    Analyze emissions data and provide recommendations.
    
    Args:
        emissions_data: Emissions data dictionary
        **kwargs: Additional parameters to pass to query_ai_engine
        
    Returns:
        Analysis and recommendations
    """
    # Convert data to string representation
    data_str = "\n".join([f"{k}: {v}" for k, v in emissions_data.items()])
    
    prompt = f"""
    Analyze this vessel emissions data and provide:
    1. Key observations
    2. Compliance status with IMO regulations
    3. Recommendations for improvement
    
    Emissions data:
    {data_str}
    """
    
    return await query_ai_engine(prompt, **kwargs)

async def extract_document_data(document_text: str, data_type: str, **kwargs) -> str:
    """
    Extract structured data from document text.
    
    Args:
        document_text: Text extracted from document
        data_type: Type of data to extract (invoice, report, etc.)
        **kwargs: Additional parameters to pass to query_ai_engine
        
    Returns:
        Structured data extracted by AI
    """
    prompt = f"""
    Extract key information from this {data_type} document.
    Return the data in a structured format with clear labels.
    
    Document text:
    {document_text}
    """
    
    return await query_ai_engine(prompt, **kwargs)

async def analyze_market_trends(historical_data: str, timeframe: str, **kwargs) -> str:
    """
    Analyze market trends from historical data.
    
    Args:
        historical_data: Historical market data
        timeframe: Timeframe for analysis (e.g., "last 6 months")
        **kwargs: Additional parameters to pass to query_ai_engine
        
    Returns:
        Trend analysis and predictions
    """
    prompt = f"""
    Analyze the following shipping market data from {timeframe} and provide:
    1. Key trends
    2. Market drivers
    3. Short-term outlook (next 3 months)
    
    Historical data:
    {historical_data}
    """
    
    return await query_ai_engine(prompt, **kwargs)

async def generate_voyage_summary(voyage_data: Dict[str, Any], **kwargs) -> str:
    """
    Generate a summary of a voyage.
    
    Args:
        voyage_data: Data about the voyage
        **kwargs: Additional parameters to pass to query_ai_engine
        
    Returns:
        Summary of the voyage
    """
    # Format the voyage data as a string
    voyage_str = "\n".join([f"{k}: {v}" for k, v in voyage_data.items()])
    
    prompt = f"""
    Generate a comprehensive summary of this voyage including:
    - Key operational metrics
    - Financial performance
    - Efficiency indicators
    - Notable events
    
    Voyage data:
    {voyage_str}
    """
    
    return await query_ai_engine(prompt, **kwargs)

# Batch processing utility for multiple documents
async def batch_process_documents(documents: List[str], processor_func, **kwargs) -> List[str]:
    """
    Process multiple documents in parallel.
    
    Args:
        documents: List of document texts
        processor_func: Function to process each document
        **kwargs: Additional parameters to pass to processor_func
        
    Returns:
        List of processed results
    """
    tasks = [processor_func(doc, **kwargs) for doc in documents]
    return await asyncio.gather(*tasks)