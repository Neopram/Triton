// C:\Users\feder\Desktop\MaritimeAPP\frontend\src\modules\MarketTrends\InsightHistoryPanel.tsx

import React, { useEffect, useState } from 'react';
import { format } from 'date-fns';
import { Button } from '../../components/ui/button';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '../../components/ui/table';
import { Card, CardContent } from '../../components/ui/card';
import { Loader, ChevronRight, History, Star } from 'lucide-react';
import useInsightStore from '../../store/insightStore';
import InsightFeedback from '../../components/InsightFeedback';

const InsightHistoryPanel: React.FC = () => {
 const { 
   insights, 
   loading, 
   fetchInsights, 
   fetchInsightById, 
   currentInsight, 
   clearCurrentInsight,
   stats,
   fetchStats
 } = useInsightStore();
 
 const [showFeedback, setShowFeedback] = useState(false);
 
 useEffect(() => {
   fetchInsights();
   fetchStats();
 }, [fetchInsights, fetchStats]);
 
 const handleViewInsight = (id: number) => {
   fetchInsightById(id);
   setShowFeedback(false);
 };
 
 const handleBack = () => {
   clearCurrentInsight();
 };
 
 const handleToggleFeedback = () => {
   setShowFeedback(!showFeedback);
 };
 
 if (loading && insights.length === 0) {
   return (
     <div className="flex items-center justify-center py-12">
       <Loader className="animate-spin text-gray-500 mr-2" size={24} />
       <span>Loading insights history...</span>
     </div>
   );
 }
 
 if (insights.length === 0) {
   return (
     <div className="text-center py-12">
       <div className="mb-4">
         <History size={48} className="mx-auto text-gray-400" />
       </div>
       <h3 className="text-lg font-medium mb-2">No insight history</h3>
       <p className="text-gray-500">
         Your analysis history will appear here
       </p>
     </div>
   );
 }
 
 if (currentInsight) {
   const formattedDate = format(new Date(currentInsight.created_at), 'MMMM d, yyyy • h:mm a');
   
   return (
     <div className="space-y-4">
       <div className="flex items-center justify-between">
         <Button variant="ghost" onClick={handleBack} className="flex items-center">
           <ChevronRight className="rotate-180 mr-1" size={16} />
           Back to history
         </Button>
         <Button 
           variant="outline" 
           onClick={handleToggleFeedback}
           className="flex items-center gap-1"
         >
           <Star size={16} />
           {showFeedback ? 'Hide Feedback' : 'Rate Insight'}
         </Button>
       </div>
       
       <div>
         <h3 className="text-lg font-medium">Market Insights</h3>
         <p className="text-sm text-gray-500">Generated {formattedDate}</p>
         <div className="flex items-center mt-1">
           <p className="text-xs text-gray-400 mr-3">
             Generated by {currentInsight.engine_used || 'AI'}
           </p>
           {currentInsight.rating && (
             <div className="flex items-center">
               <Star size={14} className="text-yellow-500 fill-yellow-500" />
               <span className="text-xs ml-1">{currentInsight.rating.toFixed(1)}</span>
             </div>
           )}
         </div>
       </div>
       
       {showFeedback ? (
         <Card>
           <CardContent className="pt-6">
             <InsightFeedback 
               insightId={currentInsight.id}
               currentRating={currentInsight.rating}
               currentFeedback={currentInsight.feedback}
               onFeedbackSubmitted={() => setShowFeedback(false)}
             />
           </CardContent>
         </Card>
       ) : (
         <div className="prose max-w-none bg-white p-6 rounded-md border">
           {currentInsight.insights.split('\n').map((paragraph: string, idx: number) => (
             <p key={idx}>{paragraph}</p>
           ))}
         </div>
       )}
     </div>
   );
 }
 
 return (
   <div className="space-y-4">
     {stats && (
       <div className="grid grid-cols-1 sm:grid-cols-3 gap-4 mb-6">
         <Card>
           <CardContent className="pt-6">
             <div className="text-center">
               <p className="text-sm text-gray-500">Total Insights</p>
               <p className="text-3xl font-bold">{stats.total_count}</p>
             </div>
           </CardContent>
         </Card>
         <Card>
           <CardContent className="pt-6">
             <div className="text-center">
               <p className="text-sm text-gray-500">Average Rating</p>
               <div className="flex items-center justify-center">
                 <p className="text-3xl font-bold">
                   {stats.average_rating ? stats.average_rating.toFixed(1) : "—"}
                 </p>
                 {stats.average_rating && (
                   <Star size={16} className="ml-2 text-yellow-500 fill-yellow-500" />
                 )}
               </div>
             </div>
           </CardContent>
         </Card>
         <Card>
           <CardContent className="pt-6">
             <div className="text-center">
               <p className="text-sm text-gray-500">Rated Insights</p>
               <p className="text-3xl font-bold">{stats.rated_count || 0}</p>
             </div>
           </CardContent>
         </Card>
       </div>
     )}
     
     <h3 className="text-lg font-medium">Insight History</h3>
     
     <div className="bg-white border rounded-md overflow-hidden">
       <Table>
         <TableHeader>
           <TableRow>
             <TableHead>Date</TableHead>
             <TableHead>Engine</TableHead>
             <TableHead>Rating</TableHead>
             <TableHead>Preview</TableHead>
             <TableHead className="w-16"></TableHead>
           </TableRow>
         </TableHeader>
         <TableBody>
           {insights.map(insight => (
             <TableRow key={insight.id}>
               <TableCell className="font-medium">
                 {format(new Date(insight.created_at), 'MMM d, yyyy • h:mm a')}
               </TableCell>
               <TableCell>
                 {insight.engine_used || 'AI Engine'}
               </TableCell>
               <TableCell>
                 {insight.rating ? (
                   <div className="flex items-center">
                     <Star size={16} className="text-yellow-500 fill-yellow-500 mr-1" />
                     {insight.rating.toFixed(1)}
                   </div>
                 ) : (
                   <span className="text-gray-400">Not rated</span>
                 )}
               </TableCell>
               <TableCell className="truncate max-w-xs">
                 {insight.insights.substring(0, 100)}...
               </TableCell>
               <TableCell>
                 <Button 
                   variant="ghost" 
                   size="sm" 
                   onClick={() => handleViewInsight(insight.id)}
                 >
                   View
                 </Button>
               </TableCell>
             </TableRow>
           ))}
         </TableBody>
       </Table>
     </div>
   </div>
 );
};

export default InsightHistoryPanel;